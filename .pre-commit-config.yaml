# .pre-commit-config.yaml
# See https://pre-commit.com for more information

# Don't run on files in these directories
exclude: '^(\.git|\.mypy_cache|\.pytest_cache|\.ruff_cache|\.venv|dist|build|uv\.lock)/'

# Run all hooks on all files by default
fail_fast: false

# Set minimum pre-commit version for consistency
minimum_pre_commit_version: '4.3.0'

repos:
  # Pre-commit hooks for general file quality (fast checks first)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Fast syntax checks
      - id: check-ast
        name: Check Python syntax
        stages: [pre-commit]

      # Security - no private keys
      - id: detect-private-key
        stages: [pre-commit]

      # Check for merge conflicts
      - id: check-merge-conflict
        stages: [pre-commit]

      # Debug statements
      - id: debug-statements
        name: Check for debug statements
        stages: [pre-commit]

      # File quality checks
      - id: trailing-whitespace
        stages: [pre-commit]
      - id: end-of-file-fixer
        stages: [pre-commit]
      - id: check-case-conflict
        stages: [pre-commit]
      - id: mixed-line-ending
        args: ['--fix=lf']
        stages: [pre-commit]
      - id: fix-byte-order-marker
        stages: [pre-commit]

      # Content validation
      - id: check-yaml
        args: ['--allow-multiple-documents']
        stages: [pre-commit]
      - id: check-toml
        stages: [pre-commit]
      - id: check-json
        # Note: This will fail on JSON with comments (like .vscode/settings.json)
        exclude: '.vscode/.*\.json$'
        stages: [pre-commit]

      # Prevent large files (increased limit for lock files)
      - id: check-added-large-files
        args: ['--maxkb=1000']
        exclude: 'uv\.lock$'
        stages: [pre-commit]

      # Python specific
      - id: check-docstring-first
        stages: [pre-commit]

  # Shell script validation
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: shellcheck - lint shell scripts
        args: ['--severity=warning']  # Show warnings and errors
        files: '\.(sh|bash)$'
        types: [shell]
        require_serial: false
        stages: [pre-commit]

  # Shell script formatting
  - repo: https://github.com/scop/pre-commit-shfmt
    rev: v3.12.0-2
    hooks:
      - id: shfmt
        name: shfmt - format shell scripts
        args: ['-i', '2', '-w']  # 2-space indent, write changes
        files: '\.(sh|bash)$'
        types: [shell]
        stages: [pre-commit]

  # Python code formatting in documentation
  - repo: https://github.com/asottile/blacken-docs
    rev: 1.16.0
    hooks:
      - id: blacken-docs
        name: blacken-docs - format Python in docs
        additional_dependencies: [black==24.2.0]
        args: ['--line-length=88']  # Match Black's default
        files: '\.(md|rst|tex)$'
        types: [text]
        exclude: '^docs/plans/'  # Exclude planning docs with pseudo-code
        stages: [pre-commit]

  # YAML validation and linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: yamllint - lint YAML files
        args: [
          '--config-data',
          '{extends: default, rules: {line-length: {max: 120}, document-start: disable, truthy: disable, comments: {min-spaces-from-content: 1}}}'  # yamllint disable-line rule:line-length
        ]
        files: '\.(yaml|yml)$'
        types: [yaml]
        stages: [pre-commit]

  # Local hooks that use our project's virtual environment
  - repo: local
    hooks:
      # Commitizen - Conventional commit validation
      - id: commitizen-check
        name: Check commit message follows conventional format
        entry: ./bin/check-commit-msg.sh
        language: system
        stages: [commit-msg]
        pass_filenames: false
        always_run: true

      # Ruff - Format first (modifies files)
      - id: ruff-format
        name: ruff format
        entry: uv run ruff format
        language: system
        types: [python]
        require_serial: true
        stages: [pre-commit]

      # Ruff - Then lint (may modify files)
      - id: ruff-check
        name: ruff check
        entry: uv run ruff check --fix
        language: system
        types: [python]
        require_serial: true
        stages: [pre-commit]

      # MyPy - Static type checker (doesn't modify files)
      - id: mypy
        name: mypy type check
        entry: uv run mypy
        language: system
        types: [python]
        require_serial: true
        pass_filenames: false
        args: [src, tests, examples]
        stages: [pre-commit]
        # Note: We use full project checking to ensure type consistency
        # For faster commits, developers can use SKIP=mypy
